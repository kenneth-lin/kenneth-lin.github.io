<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo的Next主题详细配置</title>
    <url>/2020/12/03/2020-12-03/blog-20201203-170835/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/3a05351a37dc">This link from: https://www.jianshu.com/p/3a05351a37dc</a><br>Hexo的Next主题详细配置<br>===============</p>
<p>经过一番不懈的努力，我们终于按照<a href="https://www.jianshu.com/p/51617690f8ca">Hexo免费搭建一个属于自己的博客</a>搭建好了一个属于自己的博客，并且还安装了一个Next主题，但是我们的博客一开始还是很简陋的，我们需要把她装修一下。</p>
<blockquote>
<ul>
<li>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>  为了描述方便，在以下说明中，将前者称为<strong><em>站点配置文件</em></strong>， 后者称为<strong><em>主题配置文件</em></strong>。</li>
</ul>
</blockquote>
<a id="more"></a>
<blockquote>
<ul>
<li>  以下所有终端执行的命令都在你的Hexo根目录下</li>
</ul>
</blockquote>
<h2 id="1、基本信息配置"><a href="#1、基本信息配置" class="headerlink" title="1、基本信息配置"></a>1、基本信息配置</h2><blockquote>
<p>基本信息包括：博客标题、作者、描述、语言等等。</p>
</blockquote>
<p>打开 <strong><em>站点配置文件</em></strong> ，找到Site模块</p>
<pre><code>title: 标题
subtitle: 副标题
description: 描述
author: 作者
language: 语言（简体中文是zh-Hans）
timezone: 网站时区（Hexo 默认使用您电脑的时区，不用写）</code></pre>
<p>关于 <strong><em>站点配置文件</em></strong> 中的其他配置可参考<a href="https://links.jianshu.com/go?to=https://hexo.io/zh-cn/docs/configuration.html">站点配置</a></p>
<h2 id="2、菜单设置"><a href="#2、菜单设置" class="headerlink" title="2、菜单设置"></a>2、菜单设置</h2><blockquote>
<p>菜单包括：首页、归档、分类、标签、关于等等</p>
</blockquote>
<p>我们刚开始默认的菜单只有首页和归档两个，不能够满足我们的要求，所以需要添加菜单，打开 <strong><em>主题配置文件</em></strong> 找到<code>Menu Settings</code></p>
<pre><code>menu:
  home: / || home                          //首页
  archives: /archives/ || archive          //归档
  categories: /categories/ || th           //分类
  tags: /tags/ || tags                     //标签
  about: /about/ || user                   //关于
  #schedule: /schedule/ || calendar        //日程表
  #sitemap: /sitemap.xml || sitemap        //站点地图
  #commonweal: /404/ || heartbeat          //公益404</code></pre>
<p>看看你需要哪个菜单就把哪个取消注释打开就行了；<br>关于后面的格式，以<code>archives: /archives/ || archive</code>为例：<br><code>||</code> 之前的<code>/archives/</code>表示标题“归档”，关于标题的格式可以去<code>themes/next/languages/zh-Hans.yml</code>中参考或修改<br><code>||</code>之后的<code>archive</code>表示图标，可以去<a href="https://links.jianshu.com/go?to=http://fontawesome.io/icons/">Font Awesome</a>中查看或修改，Next主题所有的图标都来自Font Awesome。</p>
<h2 id="3、Next主题样式设置"><a href="#3、Next主题样式设置" class="headerlink" title="3、Next主题样式设置"></a>3、Next主题样式设置</h2><p>我们百里挑一选择了Next主题，不过Next主题还有4种风格供我们选择，打开 <strong><em>主题配置文件</em></strong> 找到<code>Scheme Settings</code></p>
<pre><code># Schemes
# scheme: Muse
# scheme: Mist
# scheme: Pisces
scheme: Gemini</code></pre>
<p>4种风格大同小异，本人用的是<a href="https://links.jianshu.com/go?to=https://youngerli.github.io">Gemini</a>风格，你们可以选择自己喜欢的风格。</p>
<h2 id="4、侧栏设置"><a href="#4、侧栏设置" class="headerlink" title="4、侧栏设置"></a>4、侧栏设置</h2><blockquote>
<p>侧栏设置包括：侧栏位置、侧栏显示与否、文章间距、返回顶部按钮等等</p>
</blockquote>
<p>打开 <strong><em>主题配置文件</em></strong> 找到<code>sidebar</code>字段</p>
<pre><code>sidebar:
# Sidebar Position - 侧栏位置（只对Pisces | Gemini两种风格有效）
  position: left        //靠左放置
  #position: right      //靠右放置

# Sidebar Display - 侧栏显示时机（只对Muse | Mist两种风格有效）
  #display: post        //默认行为，在文章页面（拥有目录列表）时显示
  display: always       //在所有页面中都显示
  #display: hide        //在所有页面中都隐藏（可以手动展开）
  #display: remove      //完全移除

  offset: 12            //文章间距（只对Pisces | Gemini两种风格有效）

  b2t: false            //返回顶部按钮（只对Pisces | Gemini两种风格有效）

  scrollpercent: true   //返回顶部按钮的百分比</code></pre>
<h2 id="5、头像设置"><a href="#5、头像设置" class="headerlink" title="5、头像设置"></a>5、头像设置</h2><p>打开 <strong><em>主题配置文件</em></strong> 找到<code>Sidebar Avatar</code>字段</p>
<pre><code># Sidebar Avatar
avatar: /images/header.jpg</code></pre>
<p>这是头像的路径，只需把你的头像命名为<code>header.jpg</code>（随便命名）放入<code>themes/next/source/images</code>中，将<code>avatar</code>的路径名改成你的头像名就OK啦！</p>
<h2 id="6、设置RSS"><a href="#6、设置RSS" class="headerlink" title="6、设置RSS"></a>6、设置RSS</h2><p>1、先安装 <a href="https://links.jianshu.com/go?to=https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 插件</p>
<pre><code>$ npm install hexo-generator-feed --save</code></pre>
<p>2、打开 <strong><em>站点配置文件</em></strong> 找到<code>Extensions</code>在下面添加</p>
<pre><code># RSS订阅
feed:
  type: atom
  path: atom.xml
  limit: 20
  hub:
  content:
  content_limit: 140
  content_limit_delim: &#39; &#39;</code></pre>
<p>3、打开 <strong><em>主题配置文件</em></strong> 找到<code>rss</code>，设置为</p>
<pre><code>rss: /atom.xml</code></pre>
<h2 id="7、添加分类模块"><a href="#7、添加分类模块" class="headerlink" title="7、添加分类模块"></a>7、添加分类模块</h2><p>1、新建一个分类页面</p>
<pre><code>$ hexo new page categories</code></pre>
<p>2、你会发现你的<code>source</code>文件夹下有了<code>categorcies/index.md</code>，打开<code>index.md</code>文件将title设置为<code>title: 分类</code><br>3、打开 <strong><em>主题配置文件</em></strong> 找到<code>menu</code>，将categorcies取消注释<br>4、把文章归入分类只需在文章的顶部标题下方添加<code>categories</code>字段，即可自动创建分类名并加入对应的分类中<br>举个栗子：</p>
<pre><code>title: 分类测试文章标题
categories: 分类名</code></pre>
<h2 id="8、添加标签模块"><a href="#8、添加标签模块" class="headerlink" title="8、添加标签模块"></a>8、添加标签模块</h2><p>1、新建一个标签页面</p>
<pre><code>$ hexo new page tags</code></pre>
<p>2、你会发现你的<code>source</code>文件夹下有了<code>tags/index.md</code>，打开<code>index.md</code>文件将title设置为<code>title: 标签</code><br>3、打开 <strong><em>主题配置文件</em></strong> 找到<code>menu</code>，将tags取消注释<br>4、把文章添加标签只需在文章的顶部标题下方添加<code>tags</code>字段，即可自动创建标签名并归入对应的标签中<br>举个栗子：</p>
<pre><code>title: 标签测试文章标题
tags: 
  - 标签1
  - 标签2
  ...</code></pre>
<h2 id="9、添加关于模块"><a href="#9、添加关于模块" class="headerlink" title="9、添加关于模块"></a>9、添加关于模块</h2><p>1、新建一个关于页面</p>
<pre><code>$ hexo new page about</code></pre>
<p>2、你会发现你的<code>source</code>文件夹下有了<code>about/index.md</code>，打开<code>index.md</code>文件即可编辑关于你的信息，可以随便编辑。<br>3、打开 <strong><em>主题配置文件</em></strong> 找到<code>menu</code>，将about取消注释</p>
<h2 id="10、添加搜索功能"><a href="#10、添加搜索功能" class="headerlink" title="10、添加搜索功能"></a>10、添加搜索功能</h2><p>1、安装 <a href="https://links.jianshu.com/go?to=https://github.com/flashlab/hexo-generator-search">hexo-generator-searchdb</a> 插件</p>
<pre><code>$ npm install hexo-generator-searchdb --save</code></pre>
<p>2、打开 <strong><em>站点配置文件</em></strong> 找到<code>Extensions</code>在下面添加</p>
<pre><code># 搜索
search:
  path: search.xml
  field: post
  format: html
  limit: 10000</code></pre>
<p>3、打开 <strong><em>主题配置文件</em></strong> 找到<code>Local search</code>，将<code>enable</code>设置为<code>true</code></p>
<h2 id="11、添加阅读全文按钮"><a href="#11、添加阅读全文按钮" class="headerlink" title="11、添加阅读全文按钮"></a>11、添加阅读全文按钮</h2><p>因为在你的博客主页会有多篇文章，如果你想让你的文章只显示一部分，多余的可以点击阅读全文来查看，那么你需要在你的文章中添加</p>
<pre><code>&lt;!--more--&gt;</code></pre>
<p>其后面的部分就不会显示了，只能点击阅读全文才能看</p>
<h2 id="12、修改文章内链接文本样式"><a href="#12、修改文章内链接文本样式" class="headerlink" title="12、修改文章内链接文本样式"></a>12、修改文章内链接文本样式</h2><p>效果图</p>
<p>打开文件 <code>themes/next/source/css/_common/components/post/post.styl</code>，在末尾添加</p>
<pre><code>.post-body p a &#123;
  color: #0593d3;
  border-bottom: none;
  border-bottom: 1px solid #0593d3;
  &amp;:hover &#123;
    color: #fc6423;
    border-bottom: none;
    border-bottom: 1px solid #fc6423;
  &#125;
&#125;</code></pre>
<p>其中选择 .post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p>
<h2 id="13、设置网站缩略图标"><a href="#13、设置网站缩略图标" class="headerlink" title="13、设置网站缩略图标"></a>13、设置网站缩略图标</h2><blockquote>
<p>从网上看了很多设置方法都是说把favicon.ico放到站点目录的source目录下就可以了，可是我试了好多遍，并不行。</p>
</blockquote>
<p>我的设置方法是这样的：把你的图片（png或jpg格式，不是favicon.ico）放在<code>themes/next/source/images</code>里，然后打开 <strong><em>主题配置文件</em></strong> 找到<code>favicon</code>，将<code>small、medium、apple_touch_icon</code>三个字段的值都设置成<code>/images/图片名.jpg</code>就可以了，其他字段都注释掉。  </p>
<h2 id="14、设置文章字体的颜色、大小"><a href="#14、设置文章字体的颜色、大小" class="headerlink" title="14、设置文章字体的颜色、大小"></a>14、设置文章字体的颜色、大小</h2><p>效果图</p>
<p>如果想设置某一句的颜色或大小，只需用html语法写出来就行了</p>
<pre><code>接下来就是见证奇迹的时刻
&lt;font color=&quot;#FF0000&quot;&gt; 我可以设置这一句的颜色哈哈 &lt;/font&gt; 
&lt;font size=6&gt; 我还可以设置这一句的大小嘻嘻 &lt;/font&gt; 
&lt;font size=5 color=&quot;#FF0000&quot;&gt; 我甚至可以设置这一句的颜色和大小呵呵&lt;/font&gt; </code></pre>
<h2 id="15、设置文字居中"><a href="#15、设置文字居中" class="headerlink" title="15、设置文字居中"></a>15、设置文字居中</h2><p>设置方法：</p>
<pre><code>&lt;center&gt;这一行需要居中&lt;/center&gt;</code></pre>
<blockquote>
<p>注意：简书中此方法无效</p>
</blockquote>
<h2 id="16、添加评论系统"><a href="#16、添加评论系统" class="headerlink" title="16、添加评论系统"></a>16、添加评论系统</h2><blockquote>
<p>目前国内比较有名的多说、网易云跟帖评论系统都已停止服务了，国外的Disqus评论系统还得需要翻墙，所以不推荐使用，剩下的还有搜狐畅言、友言、来必力等。<br>本来想使用畅言的，结果注册完之后还得要求备案，我只想说F开头的那个单词，果断放弃。<br>后来选择了友言</p>
</blockquote>
<p>1、进入<a href="https://links.jianshu.com/go?to=http://www.uyan.cc">友言官网</a>注册、登录步骤我就不介绍了<br>2、登录完成之后，点击获取代码，你会发现出来了一段代码，里面有你的<code>uid=1234567</code><br>3、打开 <strong><em>主题配置文件</em></strong> 找到<code>youyan_uid</code>将值设置为上面的uid就可以了</p>
<h2 id="17、添加站点访问计数"><a href="#17、添加站点访问计数" class="headerlink" title="17、添加站点访问计数"></a>17、添加站点访问计数</h2><p>站点访问计数有名的就是<a href="https://links.jianshu.com/go?to=http://busuanzi.ibruce.info">不蒜子</a>，使用起来非常方便<br>1、安装脚本<br>打开 <strong>themes/next/layout/_partial/footer.swig</strong>，将下面这段代码添加到里面</p>
<pre><code>&lt;div&gt;
&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;
&lt;span id=&quot;busuanzi_container_site_pv&quot; style=&#39;display:none&#39;&gt;
    本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt; 次
    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;
&lt;/span&gt;
&lt;span id=&quot;busuanzi_container_site_uv&quot; style=&#39;display:none&#39;&gt;
    有&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人看过我的博客啦
&lt;/span&gt;
&lt;/div&gt;</code></pre>
<p>添加的位置如下图，可自行根据个人喜好更换位置</p>
<p>2、以上只是显示站点的访问次数，如果想显示每篇文章的访问次数，打开 <strong>themes/next/layout/_macro/post.swig</strong>，在第一行增加<code>is_pv</code>字段</p>
<pre><code>&#123;% macro render(post, is_index, is_pv, post_extra_class) %&#125;</code></pre>
<p>然后将这段代码插入到里面</p>
<pre><code>&#123;% if is_pv %&#125;
      <span class="post-meta-divider">|</span>
      <span id="busuanzi_value_page_pv"></span>次阅读
    &#123;% endif %&#125;</code></pre>
<p>插入的位置</p>
<p>然后再打开 <strong>themes/next/layout/post.swig</strong>，这个文件是文章的模板，给render方法传入参数（对应刚才添加的<code>is_pv</code>字段）</p>
<p>最后再打开 <strong>themes/next/layout/index.swig</strong>，这个文件是首页的模板，给render方法传入参数（对应刚才添加的is_pv字段）</p>
<p>OK！设置完毕。</p>
<h2 id="18、去掉文章目录标题的自动编号"><a href="#18、去掉文章目录标题的自动编号" class="headerlink" title="18、去掉文章目录标题的自动编号"></a>18、去掉文章目录标题的自动编号</h2><p>我们自己写文章的时候一般都会自己带上标题编号，但是默认的主题会给我们带上编号，很是别扭，如何去掉呢？<br>打开<strong><em>主题配置文件</em></strong>，找到</p>
<p>将<code>number</code>改为<code>false</code>即可</p>
<h2 id="18、更多"><a href="#18、更多" class="headerlink" title="18、更多"></a>18、更多</h2><p>1、还有其他更多的主题配置，请查看<a href="https://links.jianshu.com/go?to=http://theme-next.iissnan.com/theme-settings.html">主题配置</a><br>2、还有其他更多的插件，请查看<a href="https://links.jianshu.com/go?to=https://hexo.io/plugins/">Hexo插件</a></p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio Profiler Memory（内存分析工具）的简单使用及问题分析</title>
    <url>/2020/12/07/2020-12-07/blog-20201207-162014/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/60efad38c5d6">This link is from: https://www.jianshu.com/p/60efad38c5d6</a><br>Memory Profiler 是 Android Studio自带的内存分析工具，可以帮助开发者很好的检测内存的使用，在出现问题时，也能比较方便的分析定位问题，不过在使用的时候，好像并非像自己一开始设想的样子。</p>
<h2 id="如何查看整体的内存使用概况"><a href="#如何查看整体的内存使用概况" class="headerlink" title="如何查看整体的内存使用概况"></a>如何查看整体的内存使用概况</h2><p>如果想要看一个APP整体内存的使用，看APP heap就可以了，不过需要注意Shallow Size跟Retained Size是意义，另外native消耗的内存是不会被算到Java堆中去的。</p>
<a id="more"></a>
<p>image.png</p>
<ul>
<li>  Allocations：堆中的实例数。</li>
<li>  Shallow Size：此堆中所有实例的总大小（以字节为单位）。<strong>其实算是比较真实的java堆内存</strong></li>
<li>  Retained Size：为此类的所有实例而保留的内存总大小（以字节为单位）。<strong>这个解释并不准确，因为Retained Size会有大量的重复统计</strong></li>
<li>  native size：8.0之后的手机会显示，主要反应Bitmap所使用的像素内存（8.0之后，转移到了native）</li>
</ul>
<p>举个例子，创建一个List的场景，有一个ListItem40MClass类，自身占用40M内存，每个对象有个指向下一个ListItem40MClass对象的引用，从而构成List，</p>
<pre><code>class ListItem40MClass &#123;

    byte[] content = new byte[1000 * 1000 * 40];
    ListItem40MClass() &#123;
        for (int i = 0; i &lt; content.length; i++) &#123;
            content[i] = 1;
        &#125;
    &#125;

    @Override
    protected void finalize() throws Throwable &#123;
        super.finalize();
    &#125;

    ListItem40MClass next;
&#125;


@OnClick(R.id.first)
void first() &#123;
    if (head == null) &#123;
        head = new ListItem40MClass();
    &#125; else &#123;
        ListItem40MClass tmp = head;
        while (tmp.next != null) &#123;
            tmp = tmp.next;
        &#125;
        tmp.next = new ListItem40MClass();
    &#125;
&#125;</code></pre>
<p>我们创建三个这样的对象，并形成List，示意如下</p>
<pre><code>A1-&gt;next=A2
A2-&gt;next=A3 
A3-&gt;next= null</code></pre>
<p>这个时候用Android Profiler查看内存，会看到如下效果：Retained Size统计要比实际3个ListItem40MClass类对象的大小大的多，如下图：</p>
<p>281540022720_.pic_hd.jpg</p>
<p>可以看到就总量而言Shallow Size基本能真是反应Java堆内存，而Retained Size却明显要高出不少， 因为Retained Size统计总内存的时候，基本不能避免重复统计的问题，比如：A对象有B对象的引用在计算总的对象大小的时候，一般会多出一个B，就像上图，有个3个约40M的int[]对象，占内存约120M,而每个ListItem40MClass对象至少会再统计一次40M，这里说的是至少，因为对象间可能还有其他关系。我们看下单个类的内存占用-Instance View</p>
<ul>
<li>  Depth：从任意 GC 根到所选实例的最短 hop 数。</li>
<li>  Shallow Size：此实例的大小。</li>
<li>  Retained Size：此实例支配的内存大小（根据 dominator 树）。</li>
</ul>
<p>可以看到Head本身的Retained Size是120M ，Head-&gt;next 是80M，最后一个ListItem40MClass对象是40M，因为每个对象的Retained Size除了包括自己的大小，还包括引用对象的大小，整个类的Retained Size大小累加起来就大了很多，所以如果想要看整体内存占用，看Shallow Size还是相对准确的，Retained Size可以用来大概反应哪种类占的内存比较多，仅仅是个示意，不过还是Retained Size比较常用，因为Shallow Size的大户一般都是String，数组，基本类型意义不大，如下。</p>
<p>291540025853_.pic.jpg</p>
<h2 id="FinalizerReference大小跟内存使用及内存泄漏的关系"><a href="#FinalizerReference大小跟内存使用及内存泄漏的关系" class="headerlink" title="FinalizerReference大小跟内存使用及内存泄漏的关系"></a>FinalizerReference大小跟内存使用及内存泄漏的关系</h2><p>之前说Retained Size是此实例支配的内存大小，其实在Retained Size的统计上有很多限制，比如Depth：从任意 GC 根到所选实例的最短hop数，一个对象的Retained Size只会统计Depth比自己大的引用，而不会统计小的，这个可能是为了避免重复统计而引入的，但是其实Retained Size在整体上是免不了重复统计的问题，所以才会右下图的情况：</p>
<p>image.png</p>
<p>FinalizerReference中refrent的对象的retain size是40M，但是没有被计算到FinalizerReference的retain size中去，而且就图表而言FinalizerReference的意义其实不大，FinalizerReference对象本身占用的内存不大，其次FinalizerReference的retain size统计的可以说是FinalizerReference的重复累加的和，并不代表其引用对象的大小，仅仅是ReferenceQueue<Object> queue中ReferenceQueue的累加，</p>
<pre><code>public final class FinalizerReference&lt;T&gt; extends Reference&lt;T&gt; &#123;
    // This queue contains those objects eligible for finalization.
    public static final ReferenceQueue&lt;Object&gt; queue = new ReferenceQueue&lt;Object&gt;();

    // Guards the list (not the queue).
    private static final Object LIST_LOCK = new Object();

    // This list contains a FinalizerReference for every finalizable object in the heap.
    // Objects in this list may or may not be eligible for finalization yet.
    private static FinalizerReference&lt;?&gt; head = null;

    // The links used to construct the list.
    private FinalizerReference&lt;?&gt; prev;
    private FinalizerReference&lt;?&gt; next;

    // When the GC wants something finalized, it moves it from the &#39;referent&#39; field to
    // the &#39;zombie&#39; field instead.
    private T zombie;

    public FinalizerReference(T r, ReferenceQueue&lt;? super T&gt; q) &#123;
        super(r, q);
    &#125;

    @Override public T get() &#123;
        return zombie;
    &#125;

    @Override public void clear() &#123;
        zombie = null;
    &#125;

    public static void add(Object referent) &#123;
        FinalizerReference&lt;?&gt; reference = new FinalizerReference&lt;Object&gt;(referent, queue);
        synchronized (LIST_LOCK) &#123;
            reference.prev = null;
            reference.next = head;
            if (head != null) &#123;
                head.prev = reference;
            &#125;
            head = reference;
        &#125;
    &#125;

    public static void remove(FinalizerReference&lt;?&gt; reference) &#123;
        synchronized (LIST_LOCK) &#123;
            FinalizerReference&lt;?&gt; next = reference.next;
            FinalizerReference&lt;?&gt; prev = reference.prev;
            reference.next = null;
            reference.prev = null;
            if (prev != null) &#123;
                prev.next = next;
            &#125; else &#123;
                head = next;
            &#125;
            if (next != null) &#123;
                next.prev = prev;
            &#125;
        &#125;
    &#125;
...
&#125;</code></pre>
<p>每个FinalizerReference retained size 都是其next+ FinalizerReference的shallowsize，反应的并不是其refrent对象内存的大小，如下：</p>
<p>image.png</p>
<p>因此FinalizerReference越大只能说明需要执行finalize的对象越多，并且对象是通过强引用被持有，等待Deamon线程回收。可以通过该下代码试验下：</p>
<pre><code> class ListItem40MClass &#123;
        byte[] content = new byte[5];

        ListItem40MClass() &#123;
            for (int i = 0; i &lt; content.length; i += 1000) &#123;
                content[i] = 1;
            &#125;
        &#125;

        @Override
        protected void finalize() throws Throwable &#123;
            super.finalize();
            LogUtils.v(&quot;finalize ListItem40MClass&quot;);
        &#125;

        ListItem40MClass next;
    &#125;


    @OnClick(R.id.first)
    void first() &#123;
        if (head == null) &#123;
            head = new ListItem40MClass();
        &#125; else &#123;
            for (int i = 0; i &lt; 1000; i++) &#123;
                ListItem40MClass tmp = head;
                while (tmp.next != null) &#123;
                    tmp = tmp.next;
                &#125;
                tmp.next = new ListItem40MClass();
            &#125;
        &#125;
    &#125;</code></pre>
<p>多次点击后，可以看到finalize的对象线性上升，而FinalizerReference的retain size却会指数上升。</p>
<p>image.png</p>
<p>同之前40M的对比下，明显上一个内存占用更多，但是其实FinalizerReference的retain size却更小。再来理解FinalizerReference跟内存泄漏的关系就比价好理解了，回收线程没执行，实现了finalize方法的对象一直没有被释放，或者很迟才被释放，这个时候其实就算是泄漏了。</p>
<h2 id="如何看Profiler的Memory图"><a href="#如何看Profiler的Memory图" class="headerlink" title="如何看Profiler的Memory图"></a>如何看Profiler的Memory图</h2><ul>
<li>  第一：看整体Java内存使用看shallowsize就可以了</li>
<li>  第二：想要看哪些对象占用内存较多，可以看Retained Size，不过看Retained Size的时候，要注意过滤一些无用的比如 FinalizerReference，基本类型如：数组对象</li>
</ul>
<p>比如下图：Android 6.0 nexus5</p>
<p>image.png</p>
<p>从整体概况上看，Java堆内存的消耗是91兆左右，而整体的shallow size大概80M，其余应该是一些堆栈基础类型的消耗，而在Java堆栈中，占比最大的是byte[]，其次是Bitmap，bitmap中的byte[]也被算进了前面的byte[] retain size中，而FinilizerReference的retain size已经大的不像话，没什么参考价值，可以看到Bitmap本身其实占用内存很少，主要是里面的byte[]，当然这个是Android8.0之前的bitmap，8.0之后，bitmap的内存分配被转移到了native。</p>
<p>再来对比下Android8.0的nexus6p：可以看到占大头的Bitmap的内存转移到native中去了，降低了OOM风险。</p>
<p>image.png</p>
<p>并且在Android 8.0或更高版本中，可以更清楚的查看对象及内存的动态分配，而且不用dump内存，直接选中某一段，就可以看这个时间段的内存分配：如下</p>
<p>image.png</p>
<p>如上图，在时间点1 ，我们创建了一个对象new ListItem40MClass()，ListItem40MClass有一个比较占内存的byte数组，上面折线升高处有新对象创建，然后会发现内存大户是byte数组，而最新的byte数组是在ListItem40MClass对象创建的时候分配的，这样就能比较方便的看到，到底是哪些对象导致的内存上升。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>  总体Java内存使用看shallow size</li>
<li>  retained size只是个参考，不准确，存在各种重复统计问题</li>
<li>  FinalizerReference retained size 大小极其不准确，而且其强引用的对象并没有被算进去，不过finilize确实可能导致内存泄漏</li>
<li>  native size再8.0之后，对Bitmap的观测有帮助。</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidProfiler</tag>
      </tags>
  </entry>
  <entry>
    <title>Android onPause和onStop的比较</title>
    <url>/2020/12/07/2020-12-07/blog-20201207-162425/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/yano_nankai/article/details/49022325">This link is from: https://blog.csdn.net/yano_nankai/article/details/49022325</a><br>分析<br>==</p>
<ol>
<li> onPause()：Activity失去焦点，但仍然可见。</li>
<li> onStop()：Activity在后台，不可见（完全被另一个Activity挡住，或者程序后台运行）。</li>
</ol>
<p>几种情况</p>
<a id="more"></a>
<p>====</p>
<ol>
<li> 锁屏的时候，会依次调用onPause()和onStop()。</li>
<li> Toast、Dialog、Menu，三者都不会使Activity调用onPause()。</li>
<li> 一个非全屏的Activity在前面时，后面的Activity只调用onPause()。</li>
</ol>
<h2 id="Dialog"><a href="#Dialog" class="headerlink" title="Dialog"></a>Dialog</h2><p>不会调用onPause()和onStop()  </p>
<p><img src="https://img-blog.csdn.net/20151010121353789"></p>
<h2 id="非全屏Activity"><a href="#非全屏Activity" class="headerlink" title="非全屏Activity"></a>非全屏Activity</h2><p>会调用onPause()，不会调用onStop()</p>
<p><img src="https://img-blog.csdn.net/20151010121603079"></p>
<h2 id="全屏Activity"><a href="#全屏Activity" class="headerlink" title="全屏Activity"></a>全屏Activity</h2><p>会调用onPause()和onStop()  </p>
<p><img src="https://img-blog.csdn.net/20151010122736424"></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h2><pre><code>import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.DialogInterface.OnClickListener;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends Activity &#123;

    private TextView textView;
    private Button button1;
    private Button button2;

    @Override
    protected void onCreate(Bundle savedInstanceState) &#123;
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        textView = (TextView) findViewById(R.id.textView);
        button1 = (Button) findViewById(R.id.button1);
        button2 = (Button) findViewById(R.id.button2);

        button1.setOnClickListener(new View.OnClickListener() &#123;

            public void onClick(View v) &#123;
                Toast toast = Toast.makeText(getApplicationContext(),
                        &quot;默认的Toast&quot;, Toast.LENGTH_SHORT);
                toast.show();
            &#125;
        &#125;);

        button1.setOnLongClickListener(new View.OnLongClickListener() &#123;

            public boolean onLongClick(View v) &#123;

                AlertDialog.Builder builder = new Builder(MainActivity.this);

                builder.setMessage(&quot;测试onPause&quot;);
                builder.setPositiveButton(&quot;确认&quot;, new OnClickListener() &#123;
                    public void onClick(DialogInterface dialog, int which) &#123;
                        dialog.dismiss();
                    &#125;
                &#125;);

                builder.create().show();
                return true;
            &#125;
        &#125;);

        button2.setOnClickListener(new View.OnClickListener() &#123;

            public void onClick(View v) &#123;
                startActivity(new Intent(MainActivity.this,
                        SecondActivity.class));
            &#125;
        &#125;);
    &#125;

    @Override
    protected void onPause() &#123;
        System.out.println(&quot;onPause---&quot;);
        super.onPause();
    &#125;

    @Override
    protected void onStop() &#123;
        System.out.println(&quot;onStop---&quot;);
        super.onStop();
    &#125;

    // 创建菜单选项
    @Override
    public boolean onCreateOptionsMenu(Menu menu) &#123;
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.option_menu, menu);
        return true;
    &#125;
&#125;</code></pre>
<hr>
<h2 id="SecondActivity"><a href="#SecondActivity" class="headerlink" title="SecondActivity"></a>SecondActivity</h2><pre><code>import android.app.Activity;
import android.os.Bundle;

public class SecondActivity extends Activity &#123;

    @Override
    protected void onCreate(Bundle savedInstanceState) &#123;
        super.onCreate(savedInstanceState);
        setContentView(R.layout.second_xml);
    &#125;

&#125;</code></pre>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidActivity</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Activity生命周期详解</title>
    <url>/2020/12/07/2020-12-07/blog-20201207-162516/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/ttandroid/article/details/80926753">This link is from: https://blog.csdn.net/ttandroid/article/details/80926753</a><br>Activity作为Android的四大组件之一，非常的重要，也是最常用的四大组件，使用Activity必须要在AndroidManifest中进行注册，那么作为Android的基础，Activity的生命周期你是否完全掌握了呢？下面就让我们来一起回顾一下Activity的生命周期吧！</p>
<p>首先，你需要知道 Activity的生命周期分为两种。</p>
<ol>
<li> 典型情况下的生命周期（就是我们开发中经常用到的）</li>
<li> 异常情况下的生命周期（虽说开发中也会用到，但是并不是所有的项目都会去（需要）回调异常生命周期的方法）</li>
</ol>
<a id="more"></a>
<p>所以我们先来介绍前者，因为后者出现的情况比较特殊。</p>
<ul>
<li>  典型情况下的生命周期。（官网的流程图肯定是要看的，一张图包含了一个Activity从创建到销毁所经历的一切）</li>
</ul>
<p><img src="https://img-blog.csdn.net/20180705144445771?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RUQW5kcm9pZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p>
<p>先总结一下有什么生命周期回调方法以及各个生命周期回调方法都是代表什么意思。</p>
<ol>
<li> onCreate：在首次创建 Activity 时调用。系统向此方法传递一个 Bundle 对象，其中包含 Activity 的上一状态，不过前提是捕获了该状态，而后会调用onStart方法。（可以在此方法中执行所有正常的静态设置 ，比如：创建视图、将数据绑定到列表等等。）</li>
<li> onStart：在 Activity 即将对用户可见之前调用。而后如果Activity转入了前台就会调用onResume方法。 如果此时直接屏幕熄灭或者用户按下home键则会直接调用onStop方法，当然这种情况比较极端。</li>
<li> onResume：在 Activity 即将开始与用户进行交互之前调用。 此时，Activity 处于 Activity 堆栈的顶层，并具有用户输入焦点。当跳转另一个Activity，或者退出当前Activity后会调用onPause方法。</li>
<li> onPause：在系统即将开始继续另一个 Activity 时调用。 此方法通常用于确认对持久性数据的未保存更改、停止动画以及其他可能消耗 CPU 的内容，诸如此类。 它应该非常迅速地执行所需操作，因为它返回后，下一个 Activity 才能继续执行,所以不能执行耗时操作。而后正常情况下会调用onStop方法。但是有一种极端情况，就是如果这个时候快速让 当前Activity 返回前台，则会调用onResume方法。</li>
<li> onStop：在 Activity 对用户不再可见时调用。如果 Activity 被销毁，或另一个 Activity（一个现有 Activity 或新 Activity）继续执行并将其覆盖，就会调用此方法。而后如果 Activity 恢复与用户的交互，则会调用 <code>onRestart 方法</code>，如果 Activity 被销毁，则会调用onDestroy方法。</li>
<li> onRestart：在Activity被停止后再次启动时调用（即屏幕熄灭后再次回到app，按下home键后再次回到app），而后会调用onStart方法。</li>
<li> onDestroy：在 Activity 被销毁前调用，这是 Activity 收到的最后调用。 当 Activity 结束（对 Activity 调用了 finish 方法），或系统为节省空间而暂时销毁该 Activity 实例时，可能会调用它。 你可以通过 isFinishing 方法区分这两种情形。</li>
</ol>
<p>代码验证：</p>
<ul>
<li><p>代码</p>
<p>  @Override<br>  protected void onCreate(Bundle savedInstanceState) {</p>
<pre><code>  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  LogUtils.d(TAG,&quot;onCreate ---&gt; 创建时调用&quot;);</code></pre>
<p>  }</p>
<p>  @Override<br>  protected void onRestart() {</p>
<pre><code>  super.onRestart();
  LogUtils.d(TAG,&quot;onRestart ---&gt; 重启时调用&quot;);</code></pre>
<p>  }</p>
<p>  @Override<br>  protected void onStart() {</p>
<pre><code>  super.onStart();
  LogUtils.d(TAG,&quot;onStart ---&gt; 即将可见不可交互时调用&quot;);</code></pre>
<p>  }</p>
<p>  @Override<br>  protected void onResume() {</p>
<pre><code>  super.onResume();
  LogUtils.d(TAG,&quot;onResume ---&gt; 可见可交互时调用&quot;);</code></pre>
<p>  }</p>
<p>  @Override<br>  protected void onPause() {</p>
<pre><code>  super.onPause();
  LogUtils.d(TAG,&quot;onPause ---&gt; 即将暂停时调用&quot;);</code></pre>
<p>  }</p>
<p>  @Override<br>  protected void onStop() {</p>
<pre><code>  super.onStop();
  LogUtils.d(TAG,&quot;onStop ---&gt; 即将停止不可见时调用&quot;);</code></pre>
<p>  }</p>
<p>  @Override<br>  protected void onDestroy() {</p>
<pre><code>  super.onDestroy();
  LogUtils.d(TAG,&quot;onDestroy ---&gt; 即将销毁时调用&quot;);</code></pre>
<p>  }</p>
</li>
<li><p>验证结果</p>
<p>1.正常进入Activity的生命周期log日志。</p>
<p>  V/MAIN_ACTIVITY: onCreate —&gt; 创建时调用<br>  V/MAIN_ACTIVITY: onStart —&gt; 即将可见不可交互时调用<br>  V/MAIN_ACTIVITY: onResume —&gt; 可见可交互时调用</p>
</li>
</ul>
<p>    2.点击物理返回键正常退出Activity的生命周期log日志。（长按home键退出应用不走onDestroy回调方法，但是会走onSaveInstanceState方法，后面会讲）</p>
<pre><code>V/MAIN_ACTIVITY: onPause ---&gt; 即将暂停时调用
V/MAIN_ACTIVITY: onStop ---&gt; 即将停止不可见时调用
V/MAIN_ACTIVITY: onDestroy ---&gt; 即将销毁时调用</code></pre>
<p> 3.正常进入Activity，点击home键返回手机主界面的生命周期log日志。</p>
<pre><code>V/MAIN_ACTIVITY: onCreate_A ---&gt; 创建时调用
V/MAIN_ACTIVITY: onStart_A ---&gt; 即将可见不可交互时调用
V/MAIN_ACTIVITY: onResume_A ---&gt; 可见可交互时调用
V/MAIN_ACTIVITY: onPause_A ---&gt; 即将暂停时调用
V/MAIN_ACTIVITY: onStop_A ---&gt; 即将停止不可见时调用</code></pre>
<p> 4.长按home键再次回到 Activity  的生命周期log日志。</p>
<pre><code>V/MAIN_ACTIVITY: onRestart_A ---&gt; 重启时调用
V/MAIN_ACTIVITY: onStart_A ---&gt; 即将可见不可交互时调用
V/MAIN_ACTIVITY: onResume_A ---&gt; 可见可交互时调用</code></pre>
<p> 5.正常进入Activity_A，启动另一个Activity_B 的生命周期log日志。</p>
<pre><code>V/MAIN_ACTIVITY: onCreate_A ---&gt; 创建时调用
V/MAIN_ACTIVITY: onStart_A ---&gt; 即将可见不可交互时调用
V/MAIN_ACTIVITY: onResume_A ---&gt; 可见可交互时调用
V/MAIN_ACTIVITY: onPause_A ---&gt; 即将暂停时调用
V/MAIN_ACTIVITY: onCreate_B ---&gt; 创建时调用
V/MAIN_ACTIVITY: onStart_B ---&gt; 即将可见不可交互时调用
V/MAIN_ACTIVITY: onResume_B ---&gt; 可见可交互时调用
V/MAIN_ACTIVITY: onStop_A ---&gt; 即将停止不可见时调用</code></pre>
<p> 6.按下物理返回键再次回到Activity_A的生命周期log日志。</p>
<pre><code>V/MAIN_ACTIVITY: onPause_B ---&gt; 即将暂停时调用
V/MAIN_ACTIVITY: onRestart_A ---&gt; 重启时调用
V/MAIN_ACTIVITY: onStart_A ---&gt; 即将可见不可交互时调用
V/MAIN_ACTIVITY: onResume_A ---&gt; 可见可交互时调用
V/MAIN_ACTIVITY: onStop_B ---&gt; 即将停止不可见时调用
V/MAIN_ACTIVITY: onDestroy_B ---&gt; 即将销毁时调用</code></pre>
<p>总结：可以清晰地看到，Avtivity的整个生命周期是发生在 onCreate 方法 和 onDestroy 方法之间的。其中可见生命周期是发生onStart 方法和 onStop 方法之间的，也就是用户可以在界面看到Activity并且可以交互的状态。前台生命周期是发生在onResume 方法和 onPause 方法之间的，这个状态下Activity位于所有的Activity之上，并且可以和用户交互。</p>
<p>备注：因为如果跳转下一个Activity时系统会先调用上一个Activity的onPause方法，所以一定不能在onPause方法中进行耗时操作！</p>
<ul>
<li>  异常情况下的生命周期。 （Activity被系统回收或者当前设备的配置发生了变化“例如横屏”，从而导致Activity被销毁重建，我们来看下官网流程图）</li>
</ul>
<p><img src="https://img-blog.csdn.net/20180705160110183?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RUQW5kcm9pZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p>
<p>先总结一下有什么生命周期回调方法以及各个生命周期回调方法都是代表什么意思。</p>
<p> 1.onSaveInstanceState：当系统为了恢复内存而销毁某项 Activity 时，Activity 对象也会被销毁，因此系统在继续 Activity 时根本无法让其状态保持完好，而是必须在用户返回 Activity 时重建 Activity 对象。但用户并不知道系统销毁 Activity 后又对其进行了重建，因此他们很可能认为 Activity 状态毫无变化。 在这种情况下，你可以实现onSaveInstanceState回调方法对有关 Activity 状态的信息进行保存，以确保有关 Activity 状态的重要信息得到保留。</p>
<p>调用时机：当用户按下HOME键时、长按HOME键，选择运行其他的程序时、按下电源按键（关闭屏幕显示）时、从activity A中启动一个新的activity时、屏幕方向切换时，例如从竖屏切换到横屏时。</p>
<p> 2.onRestoreInstanceState 或者 onCreate：系统会先调用onSaveInstanceState方法，然后销毁 Activity。系统会向该方法传递一个Bundle 对象，你可以在其中使用putString 和 putInt 等方法以键-值对形式保存有关 Activity 状态的信息。然后，如果系统终止您的应用进程，并且用户返回您的 Activity，则系统会重建该 Activity，并将Bundle同时传递给onCreate和onRestoreInstanceState。您可以使用上述任一方法从Bundle 提取您保存的状态并恢复该 Activity 状态。如果没有状态信息需要恢复，则传递给您的Bundle是空值（如果是首次创建该 Activity，就会出现这种情况）。</p>
<p>解析流程图：可以看到，从Activity running开始走，Activity 重获用户焦点时可保持状态完好。恢复数据的方式跟随生命周期的不同有两种情况。</p>
<ol>
<li> 系统在销毁 Activity 后重建 Activity，Activity 必须恢复之前保存的状态。</li>
<li> 系统停止 Activity 后继续执行 Activity，并且 Activity 状态保持完好。</li>
</ol>
<p>代码验证：</p>
<ul>
<li><p>代码</p>
<p>  @Override<br>  public void onSaveInstanceState(Bundle outState) {</p>
<pre><code>  super.onSaveInstanceState(outState);
  if (outState != null)&#123;
      outState.putString(&quot;TEST&quot;,&quot;test&quot;);
      LogUtils.d(TAG2,&quot;onSaveInstanceState ---&gt; 异常销毁时调用&quot;);
  &#125;</code></pre>
<p>  }</p>
<p>  @Override<br>  protected void onRestoreInstanceState(Bundle savedInstanceState) {</p>
<pre><code>  super.onRestoreInstanceState(savedInstanceState);

  if (savedInstanceState != null)&#123;
      String test = savedInstanceState.getString(&quot;TEST&quot;);
      LogUtils.d(TAG2,&quot;onRestoreInstanceState ---&gt; 恢复数据时调用 --&gt; &quot; + test);
  &#125;</code></pre>
<p>  }</p>
</li>
<li><p>  验证结果</p>
</li>
</ul>
<p>    1.旋转手机屏幕查看log日志。</p>
<pre><code>V/MAIN_ACTIVITY2: onSaveInstanceState ---&gt; 异常销毁时调用
V/MAIN_ACTIVITY2: onRestoreInstanceState ---&gt; 恢复数据时调用 --&gt; test</code></pre>
<p>总结：注意：onSaveInstanceState<code>的调用时序在onStop之前，但是和onPause 的调用时序就不一定了，有可能在onPause之前或者之后。又因为无法保证系统会调用onSaveInstanceState（存在不需要保存状态的情况，例如用户使用“返回”按钮离开您的 Activity 时，因为用户的行为是在显式关闭 Activity），因此您只应利用它来记录 Activity 的瞬态（UI 的状态）切勿使用它来存储持久性数据，而应使用onPause在用户离开 Activity 后存储持久性数据，例如应保存到数据库的数据。</code></p>
<p>备注：</p>
<ol>
<li> 当 Activity 暂停或停止时（用户按下hoem键或者屏幕熄灭），Activity 的状态会得到保留。 确实如此，因为当 Activity 暂停或停止时，Activity对象仍保留在内存中 ，有关其成员和当前状态的所有信息仍处于活动状态。 因此，用户在 Activity 内所做的任何更改都会得到保留，这样一来，当 Activity 返回前台（当它“继续”）时，这些更改仍然存在，所以，即使您什么都不做，也不实现onSaveInstanceState，Activity类的 onSaveInstanceState默认实现也会恢复部分 Activity 状态。具体地讲，默认实现会为布局中的每个View 调用相应的onSaveInstanceState方法，让每个视图都能提供有关自身的应保存信息。Android 框架中几乎每个小部件都会根据需要实现此方法，以便在重建 Activity 时自动保存和恢复对 UI 所做的任何可见更改。例如，EditText 小部件保存用户输入的任何文本，CheckBox小部件保存复选框的选中或未选中状态。您只需为想要保存其状态的每个小部件提供一个唯一的 ID（通过 android：id  属性）。如果小部件没有 ID，则系统无法保存其状态。（默认情况下系统不会恢复储存成员值（变量））</li>
<li> 你只需旋转设备，让屏幕方向发生变化，就能有效地测试您的应用的状态恢复能力。 当屏幕方向变化时，系统会销毁并重建 Activity，以便应用可供新屏幕配置使用的备用资源。</li>
</ol>
<p>欢迎加入Q群一起探讨Android问题。</p>
<p><img src="https://img-blog.csdnimg.cn/20181117181728800.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RUQW5kcm9pZA==,size_16,color_FFFFFF,t_70"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidActivity</tag>
      </tags>
  </entry>
  <entry>
    <title>android app内存使用限制</title>
    <url>/2020/12/07/2020-12-07/blog-20201207-162536/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/yuxiatongzhi/article/details/82023251">This link is from: https://blog.csdn.net/yuxiatongzhi/article/details/82023251</a><br>1. app内存限制<br>===========</p>
<p>  <code>Android</code>给每个<code>App</code>分配一个<code>VM</code>，让App运行在<code>dalvik</code>上，这样即使<code>App</code>崩溃也不会影响到系统。系统给<code>VM</code>分配了一定的内存大小，<code>App</code>可以申请使用的内存大小不能超过此硬性逻辑限制，就算物理内存富余，如果应用超出<code>VM</code>最大内存，就会出现内存溢出<code>crash</code>。<br>  由程序控制操作的内存空间在<code>heap</code>上，分<code>java heapsize</code>和<code>native heapsize</code>，Java申请的内存在<code>vm heap</code>上，所以如果<code>java</code>申请的内存大小超过<code>VM</code>的逻辑内存限制,就会出现内存溢出的异常。<strong>native层内存申请不受其限制</strong>,<code>native</code>层受<code>native process</code>对内存大小的限制。<br><img src="https://img-blog.csdn.net/20180824174834136?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1eGlhdG9uZ3poaQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="heapsize"></p>
<a id="more"></a>
<h1 id="2-查看Android设备上的对APP的内存限制"><a href="#2-查看Android设备上的对APP的内存限制" class="headerlink" title="2. 查看Android设备上的对APP的内存限制"></a>2. 查看Android设备上的对APP的内存限制</h1><p>主要查看系统配置文件 <code>build.prop</code>，我们可以通过<code>adb shell</code>在 命令行窗口查看</p>
<ol>
<li>查看设备app内存限制<br> <code>adb shell getprop | findstr dalvik.vm.heapgrowthlimit</code><br> <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yNjU2NzY0LTBjN2VlZmMwYWMyZmZkNjkucG5n?x-oss-process=image/format,png" alt="heapgrowthlimit"></li>
<li>Android app可以在<code>AndroidManifast.xml</code>里的<code>&lt;application android:largeHeap=&quot;true&quot;/&gt;</code>标签里加入<code>largeHeap</code>开启内存加强，开启内存加强后，可使用内存会变大，这也是一个固定值，可以查看<br> <code>adb shell getprop | findstr dalvik.vm.heapsize</code><br> <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yNjU2NzY0LTk0MTNiMzk2NjdlYTgyYTkucG5n?x-oss-process=image/format,png" alt="heapsize"></li>
<li>可以查看更详细的<br> <code>adb shell cat /system/build.prop | findstr dalvik.vm</code><br> <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yNjU2NzY0LWM3NjE5ODcxNjQ4M2UyYjMucG5n?x-oss-process=image/format,png" alt="build.prop"></li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidMemory</tag>
      </tags>
  </entry>
  <entry>
    <title>Launch App via adb without knowing Activity name [duplicate]</title>
    <url>/2020/12/08/2020-12-08/blog-20201208-101909/</url>
    <content><![CDATA[<p><a href="https://stackoverflow.com/questions/29931318/launch-app-via-adb-without-knowing-activity-name">This link is from: https://stackoverflow.com/questions/29931318/launch-app-via-adb-without-knowing-activity-name</a><br>47</p>
<p>21</p>
<p><a href="/posts/29931318/timeline" title="Show activity on this post."></a></p>
<p><strong>This question already has answers here</strong>:</p>
<a id="more"></a>

<p><a href="/questions/4567904/how-to-start-an-application-using-android-adb-tools">How to start an application using android ADB tools?</a> (11 answers)</p>
<p>Closed 3 years ago.</p>
<p>From the post <a href="https://stackoverflow.com/questions/13380590/is-it-possible-to-start-activity-through-adb-shell">Is it possible to start activity through adb shell?</a>, we can start an Android app via adb by</p>
<pre><code>adb shell am start -n yourpackagename/.activityname</code></pre>
<p>But is it possible to start an Android app via adb without knowing the Activity name? For example, by sending the <strong>android.intent.action.MAIN</strong> intent to a package? Maybe some command like this:</p>
<pre><code>adb shell am start -a android.intent.action.MAIN -n packageName</code></pre>
<p>Thanks!!</p>
<p>-Cosmo</p>
<p><a href="/questions/tagged/android" title="show questions tagged &#39;android&#39;">android</a> <a href="/questions/tagged/android-intent" title="show questions tagged &#39;android-intent&#39;">android-intent</a> <a href="/questions/tagged/adb" title="show questions tagged &#39;adb&#39;">adb</a></p>
<p><a href="/q/29931318" title="short permalink to this question">share</a> | <a href="/posts/29931318/edit">improve this question</a> | follow |</p>
<p><a href="/posts/29931318/revisions" title="show all edits to this post">edited Aug 28 ‘18 at 22:06</a></p>
<p>[</p>
<p><img src="https://i.stack.imgur.com/HIUgI.png?s=32&g=1"></p>
<p>](/users/1778421/alex-p)</p>
<p><a href="/users/1778421/alex-p">Alex P.</a></p>
<p>25.9k1616 gold badges9898 silver badges150150 bronze badges</p>
<p>asked Apr 28 ‘15 at 22:49</p>
<p>[</p>
<p><img src="https://i.stack.imgur.com/0aQ16.jpg?s=32&g=1"></p>
<p>](/users/3697757/hackjutsu)</p>
<p><a href="/users/3697757/hackjutsu">hackjutsu</a>hackjutsu</p>
<p>6,32099 gold badges3838 silver badges7272 bronze badges</p>
<ul>
<li><p>2</p>
<p>  <a href="http://stackoverflow.com/questions/4567904/how-to-start-an-application-using-android-adb-tools/25398877#25398877" title="how to start an application using android adb tools">stackoverflow.com/questions/4567904/…</a> – <a href="/users/4409409/daniel-nugent" title="39,962 reputation">Daniel Nugent</a> Apr 28 ‘15 at 23:13</p>
</li>
<li><p>  rule of thumb - when your accepted answer is nothing but a reference to another post - your question is a duplicate – <a href="/users/1778421/alex-p" title="25,891 reputation">Alex P.</a> Aug 28 ‘18 at 22:07</p>
</li>
<li><p>2</p>
<p>  @AlexP. But this question is not quite the same—— At least, Google “adb start app” result in lots of <code>adb shell am start -n packagename/.activityname</code> things; while Google “adb start app <strong>without knowing Activity name</strong>“ won’t filter out the duplicated SO question. So this question could be reasonably valuable. – <a href="/users/1819810/weekend" title="1,341 reputation">Weekend</a> Aug 29 ‘18 at 2:38</p>
</li>
<li><p>3</p>
<p>  The duplicated question accidentally has an answer which solves this question. But it’s not the duplicated question specifically asked for. This question is asking for a more particular situation. – <a href="/users/1819810/weekend" title="1,341 reputation">Weekend</a> Aug 29 ‘18 at 2:50</p>
</li>
</ul>
<p><a href="#" title="Use comments to ask for more information or suggest improvements. Avoid answering questions in comments.">add a comment</a> | <a href="#" title="expand to show all comments on this post"></a></p>
<h2 id="3-Answers-3"><a href="#3-Answers-3" class="headerlink" title="3 Answers 3"></a>3 Answers 3</h2><p><a href="/questions/29931318/launch-app-via-adb-without-knowing-activity-name?answertab=active#tab-top" title="Answers with the latest activity first">Active</a> <a href="/questions/29931318/launch-app-via-adb-without-knowing-activity-name?answertab=oldest#tab-top" title="Answers in the order they were provided">Oldest</a> <a href="/questions/29931318/launch-app-via-adb-without-knowing-activity-name?answertab=votes#tab-top" title="Answers with the highest score first">Votes</a></p>
<p>88</p>
<p><a href="/posts/29931521/timeline" title="Show activity on this post."></a></p>
<p>Yes, it is possible to launch an app via adb shell making use of the monkey tool.</p>
<p>Using the command from <a href="https://stackoverflow.com/questions/4567904/how-to-start-an-application-using-android-adb-tools/25398877#25398877">this answer</a>:</p>
<pre><code>adb shell monkey -p app.package.name -c android.intent.category.LAUNCHER 1</code></pre>
<p>This command simulates the app icon click, so the intent implicit intent LAUNCHER is delivered to the specific receiver declared in app manifest (MAIN)</p>
<p><a href="/a/29931521" title="short permalink to this answer">share</a> | <a href="/posts/29931521/edit">improve this answer</a> | follow |</p>
<p><a href="/posts/29931521/revisions" title="show all edits to this post">edited May 23 ‘17 at 12:18</a></p>
<p>[</p>
<p><img src="https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=32&d=identicon&r=PG"></p>
<p>](/users/-1/community)</p>
<p><a href="/users/-1/community">Community</a>♦</p>
<p>111 silver badge</p>
<p>answered Apr 28 ‘15 at 23:10</p>
<p>[</p>
<p><img src="https://www.gravatar.com/avatar/48cc9682294063a9a14fb9da45ec778b?s=32&d=identicon&r=PG"></p>
<p>](/users/1648969/leuofiridia)</p>
<p><a href="/users/1648969/leuofiridia">Leuofiridia</a>Leuofiridia</p>
<p>1,03188 silver badges55 bronze badges</p>
<ul>
<li><p>  It worked. But how to detect Main Activity name? I want to send parameter to a activity (main activity in com.sec.android.gallery3d package), So I should know main activity name. – <a href="/users/421467/dr-jacky" title="2,306 reputation">Dr.jacky</a> Dec 15 ‘15 at 8:17</p>
</li>
<li><p>  Is it also possible, given the APK file, to run this ? Suppose I have an APK file, and I want to be able to install&amp;run it, is it possible? – <a href="/users/878126/android-developer" title="105,349 reputation">android developer</a> Jun 15 ‘16 at 7:41</p>
</li>
<li><p>1</p>
<p>  I get an error: <strong>No activities found to run, monkey aborted</strong> – <a href="/users/6998684/igorganapolsky" title="22,109 reputation">IgorGanapolsky</a> Aug 4 ‘16 at 21:14</p>
</li>
<li><p>2</p>
<p>  @IgorGanapolsky, are you sure the package name is correct? If you’re the developer of the application, make sure you have at least one activity with the intent filter with action <code>android.intent.action.MAIN</code> and category <code>android.intent.category.LAUNCHER</code> – <a href="/users/1648969/leuofiridia" title="1,031 reputation">Leuofiridia</a> Aug 9 ‘16 at 21:06</p>
</li>
<li><p>  @androiddeveloper yes, it’s possible. Android Studio itself use the adb to install and run the app when you click to run the file. Take a look at <a href="https://developer.android.com/studio/command-line/adb.html#move">the official adb documentation</a> for further details – <a href="/users/1648969/leuofiridia" title="1,031 reputation">Leuofiridia</a> Aug 9 ‘16 at 21:12</p>
</li>
</ul>
<p><a href="#" title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”."></a> | <a href="#" title="expand to show all comments on this post">show <strong>6</strong> more comments</a></p>
<p>11</p>
<p><a href="/posts/41174402/timeline" title="Show activity on this post."></a></p>
<p>Using latest versions (at least API 25) you can start the default Activity, without knowing its name, and not using <code>monkey</code>:</p>
<pre><code>PKG=com.android.calculator2
adb shell am start $PKG/$(adb shell cmd package resolve-activity -c android.intent.category.LAUNCHER $PKG | sed -n &#39;/name=/s/^.*name=//p&#39;)</code></pre>
<p><a href="/a/41174402" title="short permalink to this answer">share</a> | <a href="/posts/41174402/edit">improve this answer</a> | follow |</p>
<p>answered Dec 15 ‘16 at 22:31</p>
<p>[</p>
<p><img src="https://i.stack.imgur.com/IoAkG.jpg?s=32&g=1"></p>
<p>](/users/236465/diego-torres-milano)</p>
<p><a href="/users/236465/diego-torres-milano">Diego Torres Milano</a>Diego Torres Milano</p>
<p>56.2k77 gold badges9797 silver badges119119 bronze badges</p>
<ul>
<li><p>  I don’t like nitpicking much but it is not <em>starting the default Activity, without knowing its name</em> - it’s just <em>finding the default Activity first, then using it</em>. Also there is no need to run <code>cmd package</code> in a separate <code>adb shell</code> session - it could be run in the same shell as <code>am start</code>. As a bonus the command will be more OS agnostic (currently it requires some unix shell to process the substitution). Finally, <code>cmd package resolve-activity</code> command has a <code>--brief</code> parameter which would print the full name of the default activity (as the last line) even without specifying the category. – <a href="/users/1778421/alex-p" title="25,891 reputation">Alex P.</a> Dec 24 ‘16 at 21:32</p>
</li>
<li><p>8</p>
<p>  <code>adb shell &#39;am start $(cmd package resolve-activity --brief com.google.android.calculator | tail -n 1)&#39;</code> - for Windows replace <code>&#39;</code> with <code>&quot;</code> – <a href="/users/1778421/alex-p" title="25,891 reputation">Alex P.</a> Dec 24 ‘16 at 21:38</p>
</li>
</ul>
<p><a href="#" title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”.">add a comment</a> | <a href="#" title="expand to show all comments on this post"></a></p>
<p>0</p>
<p><a href="/posts/44468073/timeline" title="Show activity on this post."></a></p>
<p>If you have the apk file, you can install and start the app using <a href="https://github.com/honeynet/droidbot">droidbot</a>.</p>
<pre><code>&gt; droidbot -d emulator-5554 -a &lt;xxx.apk&gt; -install_app -policy none -count 0</code></pre>
<p>DroidBot is based on adb, but it uses static analysis to extract the Activity name automatically.</p>
<p><a href="/a/44468073" title="short permalink to this answer">share</a> | <a href="/posts/44468073/edit">improve this answer</a> | follow |</p>
<p>answered Jun 9 ‘17 at 23:47</p>
<p>[</p>
<p><img src="https://www.gravatar.com/avatar/df5bc1d7e374ed706588f14fd9bbfa6c?s=32&d=identicon&r=PG&f=1"></p>
<p>](/users/8107593/yuanchun-li)</p>
<p><a href="/users/8107593/yuanchun-li">Yuanchun Li</a>Yuanchun Li</p>
<p>2622 bronze badges</p>
<p><a href="#" title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”.">add a comment</a> | <a href="#" title="expand to show all comments on this post"></a></p>
<h2 id="Not-the-answer-you’re-looking-for-Browse-other-questions-tagged-android-android-intent-adb-or-ask-your-own-question"><a href="#Not-the-answer-you’re-looking-for-Browse-other-questions-tagged-android-android-intent-adb-or-ask-your-own-question" class="headerlink" title="Not the answer you’re looking for? Browse other questions tagged android android-intent adb or ask your own question."></a>Not the answer you’re looking for? Browse other questions tagged <a href="/questions/tagged/android" title="show questions tagged &#39;android&#39;">android</a> <a href="/questions/tagged/android-intent" title="show questions tagged &#39;android-intent&#39;">android-intent</a> <a href="/questions/tagged/adb" title="show questions tagged &#39;adb&#39;">adb</a> or <a href="/questions/ask">ask your own question</a>.</h2>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidAdb</tag>
      </tags>
  </entry>
</search>
